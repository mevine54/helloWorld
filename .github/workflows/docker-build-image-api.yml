name: SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List files in target directory
        run: ls -l target/

      - name: Start MySQL
        run: sudo service mysql start

      - name: Create Database from script
        run: mysql -u${{ secrets.DB_USER }} -p${{ secrets.DB_PASSWORD }} -e "source src/main/resources/infra/mysql/dump/springboot.sql"

      - name: Install Chrome Browser for Selenium
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: 114.0.5735.90

      - name: Run Chrome Browser for version control
        run: chrome --version

      - name: Set up ChromeDriver
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d '.' -f 1)
          echo "Detected Chrome version: $CHROME_VERSION"

          CHROMEDRIVER_VERSION=$(curl -sS https://chromedriver.storage.googleapis.com/LATEST_RELEASE_114.0.5735)

          if [ -z "$CHROMEDRIVER_VERSION" ]; then
            echo "Error: Unable to fetch ChromeDriver version for Chrome $CHROME_VERSION"
            exit 1
          fi

          echo "Detected ChromeDriver version: $CHROMEDRIVER_VERSION"

          wget -q https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          rm chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=mevine54_helloWorld

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: package.jar
          path: target/HelloApi-0.0.1-SNAPSHOT.jar

  docker-build-image-api:
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set Up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Build
        uses: docker/setup-buildx-action@v3

      - name: Connect to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: package.jar
          path: target/

      - name: List files in the repository
        run: ls ${{ github.workspace }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/helloworld:latest

      - run: echo "This job's status is ${{ job.status }}."
